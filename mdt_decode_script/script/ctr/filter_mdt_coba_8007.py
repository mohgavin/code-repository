from __future__ import print_function
import os
import sys
import os.path
import shutil
import pandas as pd
from datetime import datetime, timedelta
import zipfile
from dateutil import rrule
import warnings

def combine_mdt(s_date):
	path = '/var/opt/common5/mdt'
	dict_cellname = {}


	path_daily = '/var/opt/common5/mdt/%s' %s_date
	if not os.path.exists(path_daily):
		os.mkdir(path_daily)


	list_file = ['mdt_result', 'ue_traffic', 'ue_meas']
	#list_file = ['mdt_result']
	dict_columns = {}
	dict_columns['mdt_result'] = ['date', 'site', 'enodebid', 'ci', 'longitude', 'latitude', 'mmes1apid', 'rsrp_serving', 'rsrq_serving', 'CA_capable', 'CA_3CC_capable', 'MIMO4x4', 'ENDC', 'NR_SA']
	dict_columns['mdt_result'] = ['date', 'hour', 'site', 'enodebid', 'ci', 'longitude', 'latitude', 'mmes1apid', 'altitude', 'rsrp_serving', 'rsrq_serving']
	dict_columns['ue_traffic'] = []
	dict_columns['ue_meas'] = []
	dict_columns['result_ue_cap'] = []
	#list_site = ['4424974E', '4424739E', '441PX427E_CO', '441PL390E_CO', '441PL065E_CO', 'MC4431290E', 'SH3421104G_CO', '5018G_CO', '4424949E_CO', '441PC957E', '441PC430E_CO', '4410786E_CO', '441PX077E', '441PX087E', '441PL026E_CO', '4424902E', '442PL658E', '4424933E', '4425013E', '441PC256E_CO', '4425498E_BB', '4425007E_CO', 'V061G_CO', '441PL503E_CO', '441PC164E', 'SH4431545E', '341PC995G_CO', '442PC019E', '441PL074E_CO', '441PC902E', '441PL609E_CO', '341PX400G_CO', '5022G_CO', '442PX4803E', '441PX371E', '441PX910E_CO', '442PC087E', '441PL060E_CO', '441PL461E', '441PC199E_CO', '441PL384E_CO', '4424974E_BB', '441PX078E', '441PX094E_CO', 'MC4424718E', '4433055E', '341SC996G_CO', '441PX323E', '441PC960E_CO', '442PC009E_CO', '5016G_CO', '441PX364E_CO', '442PX349E_CO', '441PC439E', '442PC032E', '5015G_CO', '442PC472E', '4433058E', '5022G_C2', '441PC498E_CO', '442PC225E', '441PC173E', '3412390G_CO', '441PC402E', '5265G_CO', '441PC083E', 'SH4412317E_CO', '442PC179E', '4435480E', '3412296G_CO', '441A088E_CO', '441PC039E', '341PC251G_CO', '441PC124E', 'MC4415798E', '441PC805E', '442PC079E', '441PX029E']
	list_site = [430160,430965,410122,410998,410347,450198,430541,410311,440546,440033,420493,420534,430273,410265,430503,430391,420487,420531,430278,430392,420522,420578,420494,430448,420575,420565,420854,430696,430314,410802,420555,410376,430264,420799,430393,420800,430414,430622,420887,430616,420538,420518,430439,420525,420501,420804,420861,420515,420805,420862,430609,430611,430322,430289,430267,420868,430453,430275,420530,420573,420556,430618,410552,430705,420665,420551,430659,430660,430048,430399,410308,420965,430332,430626,430613,430614,430307,430126,430049,430475,430619,430665,430317,430481,420079,420535,430797,430798,420985,430799,430800,420986,430789,410901,430786,430679,420489,430368,430335,430271,430710,430711,420540,420050,410535,430713,430482,430669,420975,420509,420516,430812,430360,420976,430274,430437,410539,420498,430348,420529,420536,420495,410297,420571,430831,430718,451306,430527,430381,420848,430411,420888,430507,430690,430691,430241,420542,420533,430642,420520,420541,430354,430643,440247,420557,430417,430372,420849,420564,420558,420560,430277,420537,420547,430263,430379,430458,420524,430269,430334,430297,420135,420502,420583,430422,430763,420015,420014,420057,420020,420019,421088,420640,420028,420005,420008,420009,420029,430015,420053,420561,421094,420257,420089,420508,420076,420527,420327,420511,420328,420568,420491,420329,420566,420504,420496,420035,420753,420801,420486,420886,420802,420546,420576,420803,420559,420512,420521,420514,420760,420662,420880,420078,420528,420330,420332,420554,420333,420664,420544,430137,430242,430040,430036,430028,430329,430038,430187,430006,430819,430319,430076,430079,430285,430333,430141,430677,430581,430052,430029,430199,430960,430146,430128,430014,430210,430005,430092,430095,430215,430866,430648,430255,430046,420049,430462,430566,430283,430565,430512,430398,430621,430564,430445,430287,430432,430257,430047,430505,430330,430302,430353,430291,430416,430270,430313,430394,430487,430253,430506,430256,430404,430254,430811,430002,440287,440195,440266,440737,440565,440483,440097,440151,451244,450090,450184,430408,421009,430771,430899,420519,420073,420311,421044,430011,430007,430384,430901,440016,410301,410058,420083,420103,420082,420027,420490,420081,420549,420506,430483,430632,430575,430030,430268,430745,430444,430451,430760,430425,420581,430757,430464,430361,421100,421047,430051,430454,430480,430345,430349,430682,440323,421041,430879,430880,430881,430882,430883,430884,430885,430886,430887,430888,430889,410135,430915,430733,451458,421092,430926,440712,421102,410987,430942,430951,430966,430969,421145,430984,430991,411068,410054,430385,430373,420492,430315,420044,430849,420856,420499,421160,421161,430266,421186,430496,420968,411072,440785,420017,430858,430945,430150,430895,420331,440113,440540,440788,430910,430862,430131,420752,440030,420885,430807,420077,410282,410705,411104,440365,420510,430067,440657,430943,430358,440524,420043,430744,430344,440082,451666,410533,430723,440107,440813,420526,410059,420978,420517,430050,421006,430440,451007,450080,420539,450222,430262,450067,420808,440160,440823,440021,410550,411138,440656,430946,411034,421011,440518,430902,430433,430476,430388,430478,420582,430389,420756,430514,430620,420663,430003,450156,450129,430909,430843,440105,440089,440830,410563,410281,431017,430427,431022,420037,410536,410540,420312,430515,410542,420038,420884,420080,440248,430484,420570,420661,450054,440299,421005,440357,430863,430936,431031,440178,440854,410543,430023,440703,440860,440558,430400,430526,421021,421263,440133,440861,440235,440862,430724,431037,440111,421020,421266,440578,440863,410158,430844,440332,440855,411162,411187,410537,410815,421240,430868,411212,430405,430672,451292,430693,420891,421267,430865,421015,451915,452184,430625,430717,430708,440765,430840,410851,411161,430680,430624,420895,430646,420897,420870,430775,430704,420890,450529,440339,440820,430282,410848,411225,440752,440911,440912,420127,410565,430714,420871,430623,430652,421178,430694,431001,420674,410160,440906,440112,430375,420867,440106,440922,420893,410883,410557,431021,430925,430008,431066,452290,430809,410121,421330,421018,430098,431077,440234,411270,421276,430009,431082,430026,430822,430976,431053,440063,440687,440797,440642,421177,420960,420956,420513,430784,440671,430730,440395,431088,430250,420011,420574,430151,440002,421017,421390,421264,430520,430953,420018,430021,430938,431097,420998,421026,430857,430931,421398,431096,410291,410691,410147,410171,411125,440486,440398,430386,440354,431093,430027,430768,450217,431109,421413,430998,411307,440529,431111,431112,431113,410287,410225,451428,430016,430796,431007,430839,430838,431089,431114,421430,420562,431118,440388,410547,411159,411279,411291,421433,430572,421071,420865,420055,440286,440750,430135,430871,420042,440150,440406,450162,430407,420041,421181,430019,430698,430627,430467,451455,420036,420993,431122,421434,421120,431032,430022,430927,420869,430683,411308,411232,420572,421438,421441,431132,440967,430415,431134,420052,420096,430847,430145,430989,440629,440075,440149,430833,430842,440228,420983,450998,430113,420012,430045,410263,410234,430139,431095,420007,421402,431091,431092,430731,430576,430848,420032,420999,430850,430903,430127,430018,430923,430537,430097,430971,440008,440715,430501,430898,440245,430102,430892,430995,430996,440322,430130,431005,411094,430061,430893,421150,430144,431016,430149,430983,440835,410283,430296,431036,430536,440132,430091,410165,411207,450021,452228,410693,411243,450201,421355,431040,430129,430867,430032,431090,431061,431062,430062,430928,430788,430817,430907,430961,440917,430835,430034,430058]


	for file_type in list_file:
		list_df = []
		for hour in range(24):
			hour = '%02d'%hour
			ta_path = '%s/%s'%(path_daily, hour)
			#print("   Checking %s"%ta_path)
			if os.path.exists(ta_path):
				for file in os.listdir(ta_path):
					if file_type in file:
						if file_type != 'result_ue_cap':
							if file.endswith('.csv'):
								zip_file = '%s/%s.zip'%(ta_path, file_type)
								zf = zipfile.ZipFile(zip_file, "w", zipfile.ZIP_DEFLATED)
								zf.write('%s/%s'%(ta_path, file), '%s.csv'%file_type)
								zf.close()
								os.remove('%s/%s'%(ta_path, file))
								file = '%s.zip'%file_type
							
						#print("    reading %s %s %s %s on %s"%(file_type, enm, s_date, hour, datetime.now()))
						if len(dict_columns[file_type]) == 0:
							df_new = pd.read_csv('%s/%s'%(ta_path,file), delimiter=",", index_col=None, header='infer')
							df_new = df_new.loc[df_new['enodebid'].isin(list_site)]
							#df_new = df_new.loc[df_new['site'].isin(list_site)]
							if len(df_new) > 0:
								print('   Found %s data for MDT'%len(df_new))
								list_df.append(df_new)
						else:
							df_new = pd.read_csv('%s/%s'%(ta_path,file), delimiter=",", index_col=None, header='infer', usecols=dict_columns[file_type])
							df_new = df_new.loc[df_new['enodebid'].isin(list_site)]
							#df_new = df_new.loc[df_new['site'].isin(list_site)]
							if len(df_new) > 0:
								print('   Found %s data for MDT'%len(df_new))
								list_df.append(df_new)
		if len(list_df) > 0:
			df = pd.concat(list_df, axis=0)
			df.to_csv('%s/filter_%s.csv'%(path_daily, file_type), index=None)
			zip_file = '%s/filter_%s.zip'%(path_daily, file_type)
			zf = zipfile.ZipFile(zip_file, "w", zipfile.ZIP_DEFLATED)
			zf.write('%s/filter_%s.csv'%(path_daily, file_type), 'filter_%s.csv'%(file_type))
			zf.close()
			os.remove('%s/filter_%s.csv'%(path_daily, file_type))
			print('Result on %s/filter_%s.csv'%(path_daily, file_type))
			list_site_collected = df['enodebid'].unique().tolist()
			print('total %s sites found'%len(list_site_collected))

if __name__ == '__main__':
    warnings.filterwarnings('ignore')
    tanggal = datetime.now()
    delta_day = 49
    s_hour_2 = s_hour = 0
    s_date = s_date_2 = ""
    start_datetime = tanggal - timedelta(days=delta_day)
    stop_datetime = start_datetime
    if len(sys.argv) > 1:
        s_date = sys.argv[1]
        if len(sys.argv) >2:
            s_date_2 = sys.argv[2]
        else:
            s_date_2 = s_date

        start_datetime = datetime.strptime(s_date, '%Y%m%d')
        stop_datetime = datetime.strptime(s_date_2, '%Y%m%d')


    python_file_path = os.path.dirname(os.path.realpath(__file__))
    for dt in rrule.rrule(rrule.DAILY, dtstart=start_datetime, until=stop_datetime):
        sekarang = datetime.now()
        s_date = dt.strftime("%Y%m%d")
        print("combining MDT %s" %(s_date))


        combine_mdt(s_date)



    
    

    
    

